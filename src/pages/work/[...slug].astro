---
import '../../styles/global.css';
import { CollectionEntry, getCollection } from 'astro:content';

import ContactMe from '../../components/ContactMe.astro';
import SectionHeader from '../../components/SectionHeader.astro';
import Icon from '../../components/Icon.astro';
import StandardLayout from '../../layouts/StandardLayout.astro';
import Pill from '../../components/Pill.astro';

interface Props {
  entry: CollectionEntry<'work'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  const work = await getCollection('work');
  return work.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<StandardLayout title={entry.data.title} description={entry.data.description}>
  <div class="stack gap-20">
    <div class="stack gap-15">
      <header>
        <div class="wrapper stack gap-2">
          <a class="back-link" href="/work/"><Icon icon="arrow-left" /> Work</a>
          <SectionHeader title={entry.data.title} align="start">
            {
              (entry.data.role ?? entry.data.timeText) && 
                <div class="sub-heading">
                  {entry.data.role && <p>{entry.data.role}</p>}
                  {entry.data.timeText && <p class="time-text">{entry.data.timeText}</p>}
                </div>
              
            }
          </SectionHeader>

          <div class="details">
            <div class="tags">
              {entry.data.tags.map((t) => <Pill>{t}</Pill>)}
            </div>
            <p class="description">{entry.data.description}</p>
          </div>
        </div>
      </header>
      <main class="wrapper">
        <div class="stack gap-10 content">
          {entry.data.img && <img src={entry.data.img} alt={entry.data.img_alt || ''} />}
          <div class="content">
            <Content />
          </div>
        </div>
      </main>
    </div>
    <ContactMe />
  </div>
</StandardLayout>

<style>
  header {
    padding-bottom: 2.5rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .back-link {
    display: none;
  }

	.sub-heading {
		margin-top: -1rem;
		margin-bottom: 0.5rem;
		text-align: center;
		font-size: var(--text-lg);
	}

	.time-text {
    font-style: italic;
    color: var(--accent-dark);
	}

  .details {
    display: grid;
    grid-template: auto auto / auto;
    padding: 0.5rem;
    gap: 1.5rem;
    justify-content: space-between;
    align-items: center;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .description {
    font-size: var(--text-lg);
    max-width: 54ch;
  }

  .content {
    max-width: 65ch;
    margin-inline: auto;
  }

  .content > :global(* + *) {
    margin-top: 1rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(h1) {
    font-size: var(--text-3xl);
  }

  .content :global(h2) {
    font-size: var(--text-2xl);
  }

  .content :global(h3) {
    font-size: var(--text-xl);
  }

  .content :global(h4) {
    font-size: var(--text-lg);
  }

  .content :global(h5) {
    font-size: var(--text-md);
  }

  .content :global(h6) {
    font-size: var(--text-base);
  }

  .content :global(img) {
    border-radius: 1.5rem;
    box-shadow: var(--shadow-sm);
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
  }

  .content :global(blockquote) {
    font-size: var(--text-md);
    font-family: var(--font-brand);
    font-weight: 600;
    line-height: 1.1;
    padding-inline-start: 1.5rem;
    border-inline-start: 0.25rem solid var(--accent-dark);
    color: var(--gray-0);
  }

  .back-link,
  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  @media (min-width: 50em) {
    .back-link {
      display: block;
      align-self: flex-start;
    }

		.sub-heading {
			text-align: left;
			margin-bottom: 0;
		}

    .details {
      grid-template: auto / 1fr 1fr;
      gap: 2.5rem;
    }

    .content :global(blockquote) {
      font-size: var(--text-xl);
    }
  }
</style>
